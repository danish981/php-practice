





ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES
ALL THE FILES INSIDE THE "CLASSES" OR "MYCLASSES" ARE ACTUALLY CLASSES







// ------------------- INTERFACES -----------------------------------------
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS
INTERFACES ALLOW YOU TO CREATE CODE THAT WHICH SPECIFIES WHICH METHODS A CLASS MUST IMPLEMENT, WITHOUT DEFINING THESE METHODS





WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE
WE HAVE TO INCLDUE THE INTERFACE WHERE WE ARE IMPLEMENTING THEM, WHILE FOR THE CLASSES WE DONT NEED TO INCLUDE






// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class


// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class


// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP


// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE


// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods


// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only


// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE







A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY
A CLASS CANNOT IMPLEMENT TWO INTERFACES HAVING SAME METHOD NAMES, SINCE IT WILL CAUSE AMBIGUITY





A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES
A CLASS CAN IMPLEMENT MULTIPLE INTERFACES





IF CLASSES ARE IN THE SAME FILE





IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE
IF A CLASS IMPLEMENTS AN INTERFACES, IT MUST DEFINE ALL THE METHODS PRESENT IN THE INTERFACE






ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE
ALL THE METHODS IN INTERFACE MUST BE PUBLIC, THIS IS THE NATURE OF INTERFACE





// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS
// NOTE : PROTECTED ABSTRACT METHODS CAN BE OVERRIDEN AS PUBLIC IN CHILD CLASS





// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED
// FINAL CLASS CANNOT BE EXTENDED BUT IT CAN BE INSTANTIATED





// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL
// NOTE : FINAL CLASS FIELDS CANNOT BE DECLARED AS FINAL







// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM
// NOTE : WHEN CLASS IS FINAL, ALL FIELDS AND METHODS ARE FINAL, SO NO NEED OF WRITING FINAL WITH THEM






// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED
// FINAL CLASS CANNOT BE EXTENDED






// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN
// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN
// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN
// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN
// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN
// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN
// NOTE : PUBLIC ABSTRACT METHODS CANNOT BE OVERRIDEN





// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class
// NOTE : public fields and methods cannot be overriden as protected in child class









// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class
// NOTE : we can override proteced fields and methods to public fields and methods from parent to child class






// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP
// THERE IS NOT DIRECT MULTIPLE INHERITENCE IN PHP






// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE
// IN ONLY MULTILEVEL INHERITENCE






// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods
// NOTE : $this-> can access public protected fields and methods from anywhere except private fields and methods






// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only
// NOTE : self:: can access public methods only





// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE 
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE
// NOTE : WE CANNOT OVERRIDE THE PARENT CLASS VARIALBES AS PRIVATE


