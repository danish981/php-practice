<?php

class D extends C {

    public $public_data_D = "D<br>";
    public $public_data_A = "public A overriden in class D<br>";
    public $public_data_B = "public B overriden in class D<br>";
    public $public_data_C = "public C overriden in class D<br>";
    public $protected_data_A = "protected A overriden in class D<br>";
    public $protected_data_B = "protected B overriden in class D<br>";

    // protected fields overriden public here
    // protected fields overriden public here
    // protected fields overriden public here
    public $protected_data_C = "protected C overriden in class D<br>";
    protected $protected_data_D = "D<br>";
    private $private_data_D = "D<br>";

    function public_method_D() {
        echo "i am public method D()<br>";
    }

    public function protected_method_A() {
        parent::protected_method_A(); // TODO: Change the autogenerated stub
    }

    public function protected_method_B() {
        parent::protected_method_B(); // TODO: Change the autogenerated stub
    }

    public function protected_method_C() {
        parent::protected_method_C(); // TODO: Change the autogenerated stub
    }


    // protected methods overriden public here
    // protected methods overriden public here
    // protected methods overriden public here

    function accessPropertyUsingSelf() {
        echo "<br>Self can access public methods only from current class and from parent classes<br>";
        self::method__A();
        self::method__B();
        self::method__C();
        self::method__D();
        self::access__A();
        self::access__B();
        echo "--------------------------<br>";
    }

    function method__D() {
        echo "D() method <br>";
    }

    function access__A() {
        $this->method__A();
    }

    function access__B() {
        self::method__B();
    }

    function accessPropertyUsingThis() {
        echo "<br>\$this-> can access everything except/excluding private fields and methods of parent classes";
        $this->access__A();
        $this->access__B();
        $this->protected_data_A;
        $this->testField__A;
        $this->method__A();
        $this->public_data_B;
        $this->public_data_C;
        $this->protected_data_C;
        $this->public_data_D;
        echo "--------------------------<br>";
    }

    protected function protected_method_D() {
        echo "I am protected method of class D<br>";
    }

}