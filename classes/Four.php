<?php

/**
 * Created by PhpStorm.
 * User: Danish
 * Date: 3/6/2021
 * Time: 10:37 PM
 */

// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME
// NOTE : $THIS AND SELF:: ARE WORKING THE SAME

// NOTE : BUT USING PARENT:: , WE CAN ACCESS THE PARENT CLASS METHOD ONLY IF THE CURRENT CLASS NAME WOULD BE SAME

class Four extends Three
{

    function anotherFunction()
    {
        self::oneFunction();            // method of class one is called
    }

    function oneFunction()
    {
        parent::oneFunction(); // TODO: Change the autogenerated stub
    }

    function accessFunc()
    {
        parent::func();
    }

    function accessUsingSelf()
    {
        self::test();
    }

    function test()
    {
        echo "function test() is called of class Four \n" . PHP_EOL;
    }

    // method of class One can be called and can be overriden here

    function jack()
    {
        // the current class method name is the same
        // see, jack() is current class method, and parent class also has jack() method
        // we don't need to create this method, we can access the parent method without creating this method
        parent::jack(); // TODO: Change the autogenerated stub
    }

    function accessParent()
    {
        parent::accessParent(); // TODO: Change the autogenerated stub
    }

    function func()
    {
        parent::func(); // TODO: Change the autogenerated stub
    }

}